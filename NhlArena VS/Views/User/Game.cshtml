<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TestScene</title>

    <style>
        body {
            margin: 0;
            overflow: hidden;
        }

        canvas {
            background: black;
        }
    </style>
</head>
<body>

    <script>
        var Socket;
        var camera, scene, renderer;
        var controls;
        var worldObjects = {};
        var commandArray = [];
        var playerGuid;

        window.onload = function () {


            var prevTime = performance.now();
            var velocity = new THREE.Vector3();

            function init() {

                renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setPixelRatio(window.devicePixelRatio);
                renderer.setSize(window.innerWidth, window.innerHeight + 5);

                document.body.appendChild(renderer.domElement);

                //create new camera with controls
                camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 2000);

                // Create scene
                scene = new THREE.Scene({ reportSize: 10, fixedStep: 1 / 60 });

                // Create First Person Controls
                controls = new THREE.FirstPersonControls(camera);
                scene.add(controls.getObject());

                window.addEventListener('resize', onWindowResize, false);

                var basicPlane = new BasicPlane();
                scene.add(basicPlane);

                //var NHLMap = new NHLArenaMap();
                //scene.add(NHLMap);

                var light = new THREE.AmbientLight(0x404040);
                light.intensity = 2;
                scene.add(light);

                var light2 = new THREE.HemisphereLight(0xDDDDDD, 0x454545, 1);
                scene.add(light2);

            }

            //socket
            console.log("Connecting...");
            Socket = new WebSocket("ws://" + window.location.hostname + ":" + window.location.port + "/connect_client/@ViewData["game"]");
                Socket.onopen = function () {
                    console.log("socket open");
                };
                Socket.onerror = error => {
                    console.log(error);
                };
                Socket.onclose = CloseEvent =>
                {
                    console.log("socket closed");
                    console.log(CloseEvent);
                };
                Socket.onmessage = function (event)
                {
                    var command = JSON.parse(event.data);
                    for (var i = 0; i < command.length; i++)
                    {
                        switch (command[i].commandType) {
                            case "InitializePlayerCommand":
                                playerGuid = command[i].playerGuid
                                break;
                            case "DeathCommand":
                                console.log("death");
                                break;
                            case "UpdatePlayerStatsCommand":
                                break;
                            case "PlayerAmmoPickupCommand":
                                break;
                            case "ErrorCommand":
                                break;
                            case "NewObjectCommand":
                                if (command[i].obj.type == "Player")
                                {
                                    if (command[i].obj.guid != playerGuid){
                                        var player = new Player(command[i].obj.x, 0, command[i].obj.z);
                                        scene.add(player);
                                        worldObjects[command[i].obj.guid] = player;
                                    }
                                }
                                break;
                            case "UpdateObjectCommand":
                                if (Object.keys(worldObjects).indexOf(command[i].obj.guid) < 0) {
                                    break;
                                }
                                var object = worldObjects[command[i].obj.guid];

                                object.position.x = command[i].obj.x;
                                object.position.y = command[i].obj.y;
                                object.position.z = command[i].obj.z;

                                object.rotation.x = command[i].obj.rotationX;
                                object.rotation.y = command[i].obj.rotationY;
                                object.rotation.z = command[i].obj.rotationZ;

                                //console.log(command[i].obj.y);
                                break;
                            case "DeleteObjectCommand":
                                if (Object.keys(worldObjects).indexOf(command.parameters.guid) < 0) {
                                    break;
                                }
                                var object = worldObjects[command[i].obj.guid];
                                scene.remove(object)
                                delete worldObjects[command[i].obj.guid]
                                break;
                        }
                    }
                    Respond();

                    function Respond() {

                        var obj = new controls.getObject();

                        var cmdarray = [];

                        cmdarray[0] = updatePlayerCommand = {
                            commandType: "UpdatePlayerCommand",
                            playerGuid: playerGuid,
                            x: obj.position.x.toFixed(2),
                            y: obj.position.y.toFixed(2),
                            z: obj.position.z.toFixed(2),
                            rotationX: obj.rotation.x.toFixed(2),
                            rotationY: obj.rotation.y.toFixed(2),
                            rotationZ: obj.rotation.z.toFixed(2)
                        };

                        var cmd = JSON.stringify(cmdarray);
                        //console.log(cmd);
                        //console.log(Socket.readyState);
                        Socket.send(cmd);
                        //console.log(Socket.readyState);
                    }
                }

            function playerControls() {

                // Check for pointerlock in browser
                if (controls.controlsEnabled) {

                    // Save the current time
                    var time = performance.now();
                    // Create a delta value based on current time
                    var delta = (time - prevTime) / 1000;
                    // Set the velocity.x and velocity.z using the calculated time delta
                    velocity.x -= velocity.x * 10.0 * delta;
                    velocity.z -= velocity.z * 10.0 * delta;

                    // Calculate "gravity" using delta
                    velocity.y -= 9.8 * 20.0 * delta; // middle number = mass

                    // Moves the camera (player) forward
                    if (controls.moveForward) {
                        velocity.z -= 200.0 * delta;
                    }

                    // Moves the camera (player) backward
                    if (controls.moveBackward) {
                        velocity.z += 200.0 * delta;
                    }

                    // Moves the camera (player) left
                    if (controls.moveLeft) {
                        velocity.x -= 200.0 * delta;
                    }

                    // Moves the camera (player) right
                    if (controls.moveRight) {
                        velocity.x += 200.0 * delta;
                    }

                    // Makes the camera (player) jump
                    if (controls.jump) {
                        if (velocity.y > 100) {
                            velocity.y = 0;
                        }
                        velocity.y += 50.0;
                        controls.jump = false;
                    }

                    // Update the position using the changed delta
                    controls.getObject().translateX(velocity.x * delta);
                    controls.getObject().translateY(velocity.y * delta);
                    controls.getObject().translateZ(velocity.z * delta);

                    // Prevent the camera/player from falling out of the 'world'
                    if (controls.getObject().position.y < 2) {
                        velocity.y = 0;
                        controls.getObject().position.y = 2;
                    }

                    // Save the time for future delta calculations
                    prevTime = time;
                }
            }

            function onWindowResize() {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            }

            function animate() {
                requestAnimationFrame(animate);

                playerControls();

                renderer.render(scene, camera);
            }
            init();
            animate();
        }

    </script>
    <script src="~/lib/threejs/three.min.js"></script>
    <script src="~/lib/threejs/OrbitControls.js"></script>
    <script src="~/lib/threejs/FirstPersonControls.js"></script>
    <script src="~/lib/threejs/MTLLoader.js"></script>
    <script src="~/lib/threejs/OBJLoader.js"></script>
    <script src="~/js/BasicPlane.js"></script>
    <script src="~/js/ModelLoader.js"></script>
</body>
</html>




