<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TestScene</title>

    <!--UI_need-->
    <link rel="stylesheet" href="~/lib/materialize/materialize.min.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link href="~/css/UI.css" rel="stylesheet" />
    <link href="~/css/UI_parts.css" rel="stylesheet" />
    <!---->
	
    <style>
        body {
            margin: 0;
            overflow: hidden;
        }

        canvas {
            background: black;
        }
    </style>
</head>
<body class="noselect">
    <!--UI-->
    <img class="crosshair" src="~/images/Crosshair.png" alt="">

    <input id="toggle-Scoreboard" type="checkbox" class="toggleCheckBox menu__checkbox">
    <div class="endBackground"></div>
    <div id="Scoreboard" class="card red darken-4 center fallIn" style="width: 60vw;">
        <div class="card-content orange-text text-accent-3">
            <span class="card-title">Scoreboard:</span>
            <!--<div class="red darken-4" style="margin: 10px; padding: 0 10px 0 10px; display: block;"></div>-->
            <table>
                <thead>
                    <tr class="orange-text text-accent-3">
                        <th class="" style="width: 4%"></th>
                        <th class="" style="width: auto">Username:</th>
                        <th class="" style="width: 15%">Kills</th>
                        <th class="" style="width: 25%">Deaths</th>
                    </tr>
                </thead>
                <tbody id="Scoreboard__Content"></tbody>
            </table>

        </div>
    </div>

    <!--top:-->
    <div class="part__container part--top UItopleft">
        <div class="part__center">
            <div class="icon" onclick="ui.ShowExitMenu(true)">
                <label class="icon__label">Y</label>
                <i class="icon__i material-icons noselect">home</i>
            </div>
            <div class="icon" onclick="ui.SwitchSoundOnOff()">
                <label class="icon__label">U</label>
                <i class="icon material-icons noselect volume">volume_mute</i>
            </div>
            <div class="icon" onclick="ui.ShowOptionMenu(true)">
                <label class="icon__label">I</label>
                <i class="icon material-icons noselect">info</i>
            </div>
            <div class="icon">
                <label class="icon__label">E</label>
                <i class="icon material-icons noselect">format_list_numbered</i>
            </div>
        </div>
        <div class="part__right"></div>
    </div>

    <div class="part__container part--top UItimer">
        <div class="part__left"></div>
        <div class="part__center">
            <div id="gameTimer" style="">00:00</div>
        </div>
        <div class="part__right"></div>
    </div>

    <div class="part__container part--top UItopright">
        <div class="part__left"></div>
        <div class="part__center gamescore">
            <div id="gameScoreK">K: 00</div>
            <div id="gameScoreD">D: 00</div>
        </div>
    </div>

    <!--bottom:-->
    <div class="part__container part--bottom UIbottom">
        <div class="part__left"></div>
        <div class="part__center" style="width: 350px;">
            <div class="bar__container">
                <div class="bar__label">Herkansing:</div>
                <div id="bar--herkansing" class="bar__bar "></div>
            </div>
            <div class="bar__container">
                <div class="bar__label">Ecs:</div>
                <div id="bar--ecs" class="bar__bar "></div>
            </div>
        </div>
        <div class="part__right"></div>
    </div>

    <!--menus:-->
    <input id="toggle-OptionMenu" type="checkbox" class="toggleCheckBox menu__checkbox">
    <div onclick="ui.ShowOptionMenu(false)" class="overlayBackground"></div>
    <div id="mainMenu" class="card red darken-4 center fallIn" style="width: 300px;">
        <div class="card-content orange-text text-accent-3">
            <div class="orange-text text-accent-3 card__option">
                <i class="material-icons volume" onclick="ui.SwitchSoundOnOff()">volume_mute</i>
                <i class="material-icons" onclick="ui.ShowOptionMenu(false)">clear</i>
            </div>
            <span class="card-title">Options:</span>
            <a class="btn orange menu__option">Leave</a>
            <a class="btn orange menu__option">Leave</a>
            <a class="btn orange menu__option" href="/User/Main">Leave</a>
        </div>
    </div>

    <input id="toggle-ExitMenu" type="checkbox" class="toggleCheckBox menu__checkbox">
    <div onclick="ui.ShowExitMenu(false)" class="overlayBackground"></div>
    <div id="exitMenu" class="card red darken-4 center popIn" style="width: 300px;">
        <div class="card-content orange-text text-accent-3">
            <div class="orange-text text-accent-3 card__option">
                <i class="material-icons" onclick="ui.ShowExitMenu(false)">clear</i>
            </div>
            <span class="card-title">Leave?</span>
            <a class="btn orange menu__option" href="/User/Main">Leave</a>
            <a class="btn orange menu__option" onclick="ui.ShowExitMenu(false)">Cancel</a>
        </div>
    </div>
    <!--/UI-->

    <script>
        var Socket;
        var camera, scene, renderer;
        var controls;
        var worldObjects = {};
        var ui;
        var commandArray = [];
        var playerGuid;
        var raycaster;
        var LastNonCollidedPostion = { x: 0, y: 0, z: 0 };
        var projectiles = [];
        var firingTimer;
        var worldObjectsMesh = [];

        window.onload = function () {
            var playerGuid;
            var gameGuid;

            var prevTime = performance.now();
            firingTimer = performance.now();
            var velocity = new THREE.Vector3();

            function init() {
                ui = new UIManager();
                renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setPixelRatio(window.devicePixelRatio);
                renderer.setSize(window.innerWidth, window.innerHeight + 5);

                document.body.appendChild(renderer.domElement);

                //create new camera with controls
                camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 2000);

                // Create scene
                scene = new THREE.Scene();

                // Create First Person Controls
                controls = new THREE.FirstPersonControls(camera);
                scene.add(controls.getObject());

                controls.getObject().position.set(20, 5, -30);

                window.addEventListener('resize', onWindowResize, false);

                //var basicPlane = new BasicPlane();
                //scene.add(basicPlane);

                var NHLMap = new NHLArenaMap();
                scene.add(NHLMap);

                //Load worldobjects for better preformance
                worldObjectsMesh[0] = projectileMesh = new Projectile();

                var light = new THREE.AmbientLight(0x404040);
                light.intensity = 2;
                scene.add(light);

                var light2 = new THREE.HemisphereLight(0xDDDDDD, 0x454545, 1);
                scene.add(light2);

                // Player for testing purposes
                var player = new Player(25, -2, -35, "1234");
                //player.position.set()
                scene.add(player);

                //background music
                myAudio = new Audio('/sound/DOOT.mp3');
                myAudio.addEventListener('ended', function () {
                    this.currentTime = 0;
                    this.play();
                }, false);
                myAudio.play();
                ui.SetAudio(myAudio);
            }

            //socket
            console.log("Connecting...");
            Socket = new WebSocket("ws://" + window.location.hostname + ":" + window.location.port + "/connect_client/@ViewData["game"]");
                Socket.onopen = function () {
                    console.log("socket open");
                };
                Socket.onerror = error => {
                    console.log(error);
                    window.location.replace("http://" + window.location.hostname + ":" + window.location.port + "/User/Main");
                };
                Socket.onclosed = CloseEvent =>
                {
                    console.log("socket closed");
                    console.log(CloseEvent);
                    window.location.replace("http://" + window.location.hostname + ":" + window.location.port + "/User/Main");
                };
                Socket.onmessage = function (event)
                {
                    var command = JSON.parse(event.data);
                    for (var i = 0; i < command.length; i++)
                    {
                        switch (command[i].commandType) {
                            case "InitializePlayerCommand":
                                playerGuid = command[i].playerGuid
                                //window.history.pushState("", "", '/User/Game/' + command[i].gameGuid);
                                break;
                            case "GameTimeLeftCommand":
                                ui.UpdateTimerDisplay(command[i].gameTimeLeft);
                                break;
                            case "GameEndingCommand":
                                ui.EndScene();
                                break;
                            case "DeathCommand":
                                console.log(command[i]);
                                if (command[i].deadPlayer.guid == playerGuid) {
                                    controls.getObject().position.set(20, 5, -30);
                                    ui.UpdatePlayerArmor(command[i].deadPlayer.armour);
                                    ui.UpdatePlayerHealth(command[i].deadPlayer.health);
                                    ui.UpdateGameScores(command[i].deadPlayer.kills, command[i].deadPlayer.deaths);
                                }
                                break;
                            case "UpdatePlayerStatsCommand":
                                if (command[i].guid == playerGuid) {
                                    ui.UpdatePlayerArmor(command[i].armour);
                                    ui.UpdatePlayerHealth(command[i].health);
                                    ui.UpdateGameScores(command[i].kills, command[i].deaths);
                                }
                                ui.UpdateScoreboardScore(command[i]);
                                break;
                            case "FireCommand":
                                if (command[i].originPlayer != playerGuid) {
                                    AddProjectiles(command[i].originPosition,
                                        command[i].directionVector, command[i].velocity);
                                }
                                break;
                            case "PlayerPickupCommand":
                                if (command[i].targetPlayer == playerGuid) {
                                    //console.log("yeetus");
                                    if (command[i].item.type == "DamageBoost") {
                                        console.log("DAMAGE");
                                    }
                                    if (command[i].item.type == "SpeedBoost") {
                                        console.log("SPEED");
                                    }
                                    if (command[i].item.type == "AmmoItem") {
                                        console.log("AMMO");
                                    }
                                }
                                break;
                            case "ErrorCommand":
                                console.log(command[i]);
                                break;
                            case "NewObjectCommand":
                                if (command[i].obj.type == "Player")
                                {
                                    console.log(command[i]);
                                    ui.AddScoreboardScore(command[i].obj);
                                    if (command[i].obj.guid != playerGuid) {
                                        var player = new Player(command[i].obj.x, command[i].obj.y, command[i].obj.z, command[i].obj.guid);
                                        scene.add(player);
                                        
                                        worldObjects[command[i].obj.guid] = player;
                                        console.log(command[i]);
                                    }
                                }
                                if (command[i].obj.type == "DamageBoost") {
                                    
                                    var damageBoost = new DamageBoost();
                                    damageBoost.position.x = command[i].obj.x;
                                    damageBoost.position.y = command[i].obj.y;
                                    damageBoost.position.z = command[i].obj.z;
                                    scene.add(damageBoost);
                                    worldObjects[command[i].obj.guid] = damageBoost;
                                }
                                if (command[i].obj.type == "SpeedBoost") {

                                    var speedBoost = new SpeedBoost();
                                    speedBoost.position.x = command[i].obj.x;
                                    speedBoost.position.y = command[i].obj.y;
                                    speedBoost.position.z = command[i].obj.z;
                                    scene.add(speedBoost);
                                    worldObjects[command[i].obj.guid] = speedBoost;
                                }
                                if (command[i].obj.type == "HealthItem") {

                                    var healthItem = new HealthItem();
                                    healthItem.position.x = command[i].obj.x;
                                    healthItem.position.y = command[i].obj.y;
                                    healthItem.position.z = command[i].obj.z;
                                    scene.add(healthItem);
                                    worldObjects[command[i].obj.guid] = healthItem;
                                }
                                if (command[i].obj.type == "ArmourItem") {

                                    var armourItem = new ArmourItem();
                                    armourItem.position.x = command[i].obj.x;
                                    armourItem.position.y = command[i].obj.y;
                                    armourItem.position.z = command[i].obj.z;
                                    scene.add(armourItem);
                                    worldObjects[command[i].obj.guid] = armourItem;
                                }
                                if (command[i].obj.type == "AmmoItem") {

                                    var ammoItem = new AmmoItem();
                                    ammoItem.position.x = command[i].obj.x;
                                    ammoItem.position.y = command[i].obj.y;
                                    ammoItem.position.z = command[i].obj.z;
                                    scene.add(ammoItem);
                                    worldObjects[command[i].obj.guid] = ammoItem;
                                }
                                break;
                            case "UpdateObjectCommand":
                                if (Object.keys(worldObjects).indexOf(command[i].obj.guid) < 0) {
                                    break;
                                }
                                var object = worldObjects[command[i].obj.guid];

                                object.position.x = command[i].obj.x;
                                object.position.y = command[i].obj.y;
                                object.position.z = command[i].obj.z;

                                object.rotation.x = command[i].obj.rotationX;
                                object.rotation.y = command[i].obj.rotationY;
                                object.rotation.z = command[i].obj.rotationZ;
                                //console.log(command[i]);
                                break;
                            case "DeleteObjectCommand":
                                console.log(command[i]);
                                if (Object.keys(worldObjects).indexOf(command[i].obj.guid) < 0) {
                                    break;
                                }
                                if (command[i].obj.type == "Player") {
                                    ui.RemoveScoreboardScore(command[i].obj.guid);
                                }
                                var obj = worldObjects[command[i].obj.guid];
                                scene.remove(obj);

                                delete worldObjects[command[i].obj.guid];
                                break;
                        }
                    }
                    Respond();

                    function Respond() {

                        var obj = new controls.getObject();

                        commandArray.push(updatePlayerCommand = {
                            commandType: "UpdatePlayerCommand",
                            playerGuid: playerGuid,
                            x: obj.position.x.toFixed(2),
                            y: obj.position.y.toFixed(2),
                            z: obj.position.z.toFixed(2),
                            rotationX: (obj.rotation.x % (2 * Math.PI)).toFixed(2),
                            rotationY: (obj.rotation.y % (2 * Math.PI)).toFixed(2),
                            rotationZ: (obj.rotation.z % (2 * Math.PI)).toFixed(2)
                        });

                        var cmd = JSON.stringify(commandArray);
                        //console.log(cmd);
                        //console.log(Socket.readyState);
                        Socket.send(cmd);
                        //console.log(Socket.readyState);

                        commandArray = [];
                    }
                }

            document.addEventListener('click', WeaponFire);

            function WeaponFire() {
                if (performance.now() > firingTimer) {
                    //Get direction and origin vectors
                    var direction = new THREE.Vector3();
                    camera.getWorldDirection(direction);
                    var objPos = new THREE.Vector3(controls.getObject().position.x, controls.getObject().position.y, controls.getObject().position.z);

                    //Make new projectile and set position to player position
                    var projectile = new THREE.Object3D();
                    projectile = worldObjectsMesh[0].children[0].clone();
                    projectile.position.set(objPos.x, objPos.y, objPos.z);
                    scene.add(projectile);

                    //Make new projectile and make it alive
                    var projectileObj = {
                        projectile: projectile,
                        direction: direction,
                        alive: true,
                        velocity: 0.5,
                        isOwn: true
                    };

                    //create a firecommand and add it to the send queue
                    var fireCommand = {
                        commandType: "FireCommand",
                        originPlayer: playerGuid,
                        directionVector: [direction.x, direction.y, direction.z],
                        originPosition: [objPos.x, objPos.y, objPos.z],
                        velocity: 0.5
                    };

                    commandArray.push(fireCommand);

                    //Add apple projectile to projectiles array
                    projectiles.push(projectileObj);
                    firingTimer = performance.now() + 500;
                }
            }

            function AddProjectiles(originPosition, directionVector, velocity) {
                //Get direction vector
                var direction = new THREE.Vector3(directionVector[0], directionVector[1], directionVector[2]);

                //Make new projectile and set position to player position
                var projectile = new THREE.Object3D();
                projectile = worldObjectsMesh[0].children[0].clone();
                projectile.position.set(originPosition[0], originPosition[1], originPosition[2]);
                scene.add(projectile);

                //Make new projectile and make it alive
                var projectileObj = {
                    projectile: projectile,
                    direction: direction,
                    alive: true,
                    velocity: velocity,
                    isOwn: false
                };

                projectiles.push(projectileObj)
            }

            /**
             * Updates the position and velocity of the projectiles shot by the player*/
            function UpdateProjectiles() {
                for (var i = 0; i < projectiles.length; i++) {
                    if (projectiles[i] === undefined) continue;
                    if (projectiles[i].alive) {
                        projectiles[i].projectile.position.x += projectiles[i].velocity * projectiles[i].direction.x;
                        projectiles[i].projectile.position.y += projectiles[i].velocity * projectiles[i].direction.y;
                        projectiles[i].projectile.position.z += projectiles[i].velocity * projectiles[i].direction.z;

                        var projectileRaycaster = new THREE.Raycaster(projectiles[i].projectile.position, projectiles[i].direction, 0, 0.5);

                        var intersects = projectileRaycaster.intersectObjects(scene.children, true);
                        if (intersects.length != 0) {         
                            //check all intersects
                            for (var z = 0; z < intersects.length; z++) {
                                console.log(intersects[z]);
                                if (intersects[z].object.name == "Character" && projectiles[i].isOwn) {
                                    //create a hitcommand and add it to the send queue
                                    var hitCommand = {
                                        commandType :"HitCommand",
                                        shootingPlayerGuid: playerGuid,
                                        hitPlayerGuid: intersects[z].object.parent.parent.playerGuid,
                                        damage: 10
                                    };
                                    commandArray.push(hitCommand);
                                }
                            }      
                            //intersect means something was hit so remove projectile
                            projectiles[i].alive = false;
                            scene.remove(projectiles[i].projectile);
                        }
                    }
                    if (projectiles[i].alive == false) {
                        projectiles.splice(i, 1);
                        continue;
                    }
                }
                if (firingTimer > 0) firingTimer -= 1;
            }

            function PlayerControls() {
                var canJump = false;

                // Save the current time
                var time = performance.now();

                // Check for pointerlock in browser
                if (controls.controlsEnabled) {

                    // Create a delta value based on current time
                    var delta = (time - prevTime) / 1000;
                    // Set the velocity.x and velocity.z using the calculated time delta
                    velocity.x -= velocity.x * 10.0 * delta;
                    velocity.z -= velocity.z * 10.0 * delta;

                    // Calculate "gravity" using delta
                    var deltaYVelocity = 9.8 * 20.0 * delta; // middle number = mass
                    if (deltaYVelocity > 10) {
                        deltaYVelocity = 10;
                    }
                    velocity.y -= deltaYVelocity;

                    if (velocity.y < -60) {
                        velocity.y = -60;
                    }

                    //console.log(velocity.y);
                    //console.log(deltaYVelocity);

                    // Moves the camera (player) forward
                    if (controls.moveForward) {
                        velocity.z -= 200.0 * delta;
                    }

                    // Moves the camera (player) backward
                    if (controls.moveBackward) {
                        velocity.z += 200.0 * delta;
                    }

                    // Moves the camera (player) left
                    if (controls.moveLeft) {
                        velocity.x -= 200.0 * delta;
                    }

                    // Moves the camera (player) right
                    if (controls.moveRight) {
                        velocity.x += 200.0 * delta;
                    }

                    // Update the position using the changed delta
                    controls.getObject().translateX(velocity.x * delta);
                    controls.getObject().translateY(velocity.y * delta);
                    controls.getObject().translateZ(velocity.z * delta);

                    // Prevent the camera/player from falling out of the map
                    var gravRaycaster = new THREE.Raycaster(controls.getObject().position, new THREE.Vector3(0, -1, 0), 0, 2);

                    var intersects = gravRaycaster.intersectObjects(scene.children, true);

                    if (intersects.length != 0) {
                        for (var i = 0; i < intersects.length; i++) {
                            if (intersects[i].object.name == "Map_Base") { // als de map geraakt word
                                var YIncrease = 2 - intersects[i].distance;
                                controls.getObject().position.y += YIncrease;
                                velocity.y = 0;
                                canJump = true;
                                //console.log(intersects[i]);
                            }
                        }
                    }

                    // Makes the camera (player) jump
                    if (canJump && controls.jump) {
                        velocity.y += 40.0;
                        controls.jump = false;
                        canJump = false;
                    }
                }
                // Save the time for future delta calculations
                prevTime = time;
            }

            function onWindowResize() {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            }

            function Raycasting() {
                var directionVectors = [
                    new THREE.Vector3(0, 0, 1),
                    new THREE.Vector3(1, 0, 1),
                    new THREE.Vector3(1, 0, 0),
                    new THREE.Vector3(1, 0, -1),
                    new THREE.Vector3(0, 0, -1),
                    new THREE.Vector3(-1, 0, -1),
                    new THREE.Vector3(-1, 0, 0),
                    new THREE.Vector3(-1, 0, 1),
                ];
                var hasCollided = false;
                var pos = controls.getObject().position;
                var raycastOrigin = new THREE.Vector3(pos.x, (pos.y - 1), pos.z);

                raycaster = new THREE.Raycaster(raycastOrigin, directionVectors[0], 0, 0.7);

                //raycaster check wall collisions voor heuphoogte
                for (var i = 0; i < directionVectors.length; i++) {

                    raycaster.set(raycastOrigin, directionVectors[i]);

                    var intersects = raycaster.intersectObjects(scene.children, true);

                    for (var j = 0; j < intersects.length; j++) {
                        if (intersects.length != 0) {
                            if (intersects[j].object.name == "Map_Base") {
                                controls.getObject().position.set(LastNonCollidedPostion.x, LastNonCollidedPostion.y, LastNonCollidedPostion.z);
                                hasCollided = true;
                            }
                        }
                        else {
                            hasCollided = false;
                        }
                    }
                }

                if (!hasCollided) {
                    LastNonCollidedPostion.x = pos.x;
                    LastNonCollidedPostion.y = pos.y;
                    LastNonCollidedPostion.z = pos.z;
                }
            }

            function UpdateItems() {
                for (var i = 0; i < scene.children.length; i++) {
                    if (scene.children[i] instanceof DamageBoost) {
                        scene.children[i].UpdateTime();
                    }
                    if (scene.children[i] instanceof SpeedBoost) {
                        scene.children[i].UpdateTime();
                    }
                    if (scene.children[i] instanceof AmmoItem) {
                        scene.children[i].UpdateTime();
                    }
                    if (scene.children[i] instanceof HealthItem) {
                        scene.children[i].UpdateTime();
                    }
                    if (scene.children[i] instanceof ArmourItem) {
                        scene.children[i].UpdateTime();
                    }
                }
            }

            function animate() {
                requestAnimationFrame(animate);
                Raycasting();
                PlayerControls();
                UpdateItems();
                UpdateProjectiles();
                renderer.render(scene, camera);
            }
            init();
            animate();
        }

    </script>

    <!--UI_need-->
    <script src="~/lib/jQuery v3.3.1.js"></script>
    <script src="~/lib/materialize/materialize.min.js"></script>
    <script src="~/js/UIManager.js"></script>
    <!---->
    <script src="~/lib/threejs/three.min.js"></script>
    <script src="~/lib/threejs/OrbitControls.js"></script>
    <script src="~/lib/threejs/FirstPersonControls.js"></script>
    <script src="~/lib/threejs/MTLLoader.js"></script>
    <script src="~/lib/threejs/OBJLoader.js"></script>
    <script src="~/js/BasicPlane.js"></script>
    <script src="~/js/ModelLoader.js"></script>
</body>
</html>




