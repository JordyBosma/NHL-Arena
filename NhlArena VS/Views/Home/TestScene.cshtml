<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TestScene</title>

    <style>
        body {
            margin: 0;
            overflow: hidden;
        }

        canvas {
            background: black;
        }
    </style>
</head>
<body>

    <script>
        
        window.onload = function () {
            var camera, scene, renderer;
            var controls;

            //var raycaster = new THREE.Raycaster();
            //var originVector = new THREE.Vector3();
            //var targetVector = new THREE.Vector3();
            //var directionVector = new THREE.Vector3();

            var fromPosition = new THREE.Vector3();
            var toPosition = new THREE.Vector3();
            var direction = new THREE.Vector3();
            var player;
            var intersects;
            var prevTime = performance.now();
            var velocity = new THREE.Vector3();

            function init() {

                renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setPixelRatio(window.devicePixelRatio);
                renderer.setSize(window.innerWidth, window.innerHeight + 5);

                document.body.appendChild(renderer.domElement);

                // Create new camera
                camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 2000);

                // Create scene
                scene = new Physijs.Scene({ reportSize: 2, fixedStep: 1 / 60 });

                // Create First Person Controls
                controls = new THREE.FirstPersonControls(camera, scene);
                scene.add(controls.getObject());

                window.addEventListener('resize', onWindowResize, false);

                // Create basicPlane
                var basicPlane = new BasicPlane();
                scene.add(basicPlane);

                // Create NHLMap
                var NHLMap = new NHLArenaMap();
                scene.add(NHLMap);

                // Create box
                var material = new THREE.MeshBasicMaterial({ color: 0x000000, side: THREE.DoubleSide, wireframe: true });
                var box = new Physijs.BoxMesh(
                    new THREE.BoxGeometry(5, 5, 5),
                    material
                );
                box.position.set(5, 5, -10);
                scene.add(box);

                // Create player
                player = controls.getObject();
            
                // Create lights
                var light = new THREE.AmbientLight(0x404040);
                light.intensity = 2;
                scene.add(light);

                var light2 = new THREE.HemisphereLight(0xDDDDDD, 0x454545, 1);
                scene.add(light2);
            }
            
            function CastRays() {
                var originPoint = player.position.clone();
                
                //fromPosition.x = player.position.x;
                //fromPosition.y = player.position.y;
                //fromPosition.z = player.position.z;

                //toPosition.x = player.position.x;
                //toPosition.y = player.position.y;
                //toPosition.z = player.position.z;

                //direction.x = fromPosition.x - toPosition.x;
                //direction.y = fromPosition.y - toPosition.y;
                
                scene.add(new THREE.ArrowHelper(direction, fromPosition, 100, 0xff0000));

                //raycaster.set(fromPosition, direction);
                //console.log(camera.position);

                //intersects = raycaster.intersectObjects(scene.children);
                //console.log(scene.children);

                for (var vertexIndex = 0; vertexIndex < controls.getObject().geometry.vertices.length; vertexIndex++) {
                    var localVertex = controls.getObject().geometry.vertices[vertexIndex].clone();
                    var globalVertex = localVertex.applyMatrix4(controls.getObject().matrix);
                    var directionVector = globalVertex.sub(controls.getObject().position);

                    var ray = new THREE.Raycaster(originPoint, directionVector.clone().normalize());
                    var collisionResults = ray.intersectObjects(scene.children);
                    if (collisionResults.length > 0 && collisionResults[0].distance < directionVector.length())
                        intersects[i].object.material.color.set(0xff0000); 
                }
            }

            function LogPositionGetObject() {
                window.setInterval(1000);
                console.log(controls.getObject().position.x, controls.getObject().position.y, controls.getObject().position.z);
            }
            
            function playerControls() {

                // Check for pointerlock in browser
                if (controls.controlsEnabled) {

                    // Save the current time
                    var time = performance.now();
                    // Create a delta value based on current time
                    var delta = (time - prevTime) / 1000;
                    // Set the velocity.x and velocity.z using the calculated time delta
                    velocity.x -= velocity.x * 10.0 * delta;
                    velocity.z -= velocity.z * 10.0 * delta;

                    // Calculate "gravity" using delta
                    velocity.y -= 9.8 * 20.0 * delta; // middle number = mass

                    // Moves the camera (player) forward
                    if (controls.moveForward) {
                        velocity.z -= 200.0 * delta;
                    }

                    // Moves the camera (player) backward
                    if (controls.moveBackward) {
                        velocity.z += 200.0 * delta;
                    }

                    // Moves the camera (player) left
                    if (controls.moveLeft) {
                        velocity.x -= 200.0 * delta;
                    }

                    // Moves the camera (player) right
                    if (controls.moveRight) {
                        velocity.x += 200.0 * delta;
                    }

                    // Makes the camera (player) jump
                    if (controls.jump) {
                        if (velocity.y > 100) {
                            velocity.y = 0;
                        }
                        velocity.y += 50.0;
                        controls.jump = false;
                    }

                    // Update the position using the changed delta
                    controls.getObject().translateX(velocity.x * delta);
                    controls.getObject().translateY(velocity.y * delta);
                    controls.getObject().translateZ(velocity.z * delta);

                    // Prevent the camera/player from falling out of the 'world'
                    if (controls.getObject().position.y < 3) {
                        velocity.y = 0;
                        controls.getObject().position.y = 3;
                    }

                    // Save the time for future delta calculations
                    prevTime = time;
                }
            }

            function onWindowResize() {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            }

            function animate() {
                requestAnimationFrame(animate);
                CastRays();
                playerControls();

                renderer.render(scene, camera);
            }
            init();
            animate();
        }

    </script>
    <script src="~/lib/threejs/three.min.js"></script>
    <script src="~/lib/threejs/OrbitControls.js"></script>
    <script src="~/lib/phisijs/ammo.js"></script>
    <script src="~/lib/phisijs/physi.js"></script>
    <script src="~/lib/phisijs/physijs_worker.js"></script>
    <script src="~/lib/phisijs/simplex-noise.js"></script>
    <script src="~/lib/phisijs/stats.js"></script>
    <script src="~/lib/phisijs/tween.js"></script>
    <script src="~/lib/threejs/FirstPersonControls.js"></script>
    <script src="~/lib/threejs/MTLLoader.js"></script>
    <script src="~/lib/threejs/OBJLoader.js"></script>
    <script src="~/js/BasicPlane.js"></script>
    <script src="~/js/ModelLoader.js"></script>


</body>
</html>