<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TestScene</title>

    <style>
        body {
            margin: 0;
            overflow: hidden;
        }

        canvas {
            background: black;
        }
    </style>
</head>
<body>

    <script>

        window.onload = function () {
            var camera, scene, renderer;
            var objects = new THREE.Group();
            var character;

            function init() {
                renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setPixelRatio(window.devicePixelRatio);
                renderer.setSize(window.innerWidth, window.innerHeight + 5);

                document.body.appendChild(renderer.domElement);

                camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 2000);

                // Create scene
                scene = new Physijs.Scene({ reportsize: 2, fixedTimeStep: 1 / 60 });

                //objects.add(controls.getObject());

                character = new Character(camera);
                objects.add(character);

                //objects.add(box);

                var basicPlane = new BasicPlane();
                objects.add(basicPlane);

                var light = new THREE.AmbientLight(0x404040);
                light.intensity = 2;
                objects.add(light);

                window.addEventListener('resize', onWindowResize, false);
                scene.setGravity();
                scene.add(objects);
            }

            //function playerControls() {

            //    // Check of de browser pointerlock ondersteund
            //    if (controls.controlsEnabled) {

            //        // Save the current time
            //        var time = performance.now();
            //        // Create a delta value based on current time
            //        var delta = (time - prevTime) / 1000;

            //        // Set the velocity.x and velocity.z using the calculated time delta
            //        velocity.x -= velocity.x * 10.0 * delta;
            //        velocity.z -= velocity.z * 10.0 * delta;

            //        // As velocity.y is our "gravity," calculate delta
            //        velocity.y -= 9.8 * 20.0 * delta; // 100.0 = mass

            //        if (controls.moveForward) {
            //            velocity.z -= 400.0 * delta;
            //        }

            //        if (controls.moveBackward) {
            //            velocity.z += 400.0 * delta;
            //        }

            //        if (controls.moveLeft) {
            //            velocity.x -= 400.0 * delta;
            //        }

            //        if (controls.moveRight) {
            //            velocity.x += 400.0 * delta;
            //        }

            //        if (controls.jump) {
            //            if (velocity.y > 200) {
            //                velocity.y = 0;
            //            }
            //            velocity.y += 50.0;
            //            controls.jump = false;
            //        }

            //        // Update the position using the changed delta
            //        controls.getObject().translateX(velocity.x * delta);
            //        controls.getObject().translateY(velocity.y * delta);
            //        controls.getObject().translateZ(velocity.z * delta);

            //        // Prevent the camera/player from falling out of the 'world'
            //        if (controls.getObject().position.y < 3) {
            //            velocity.y = 0;
            //            controls.getObject().position.y = 3;
            //        }

            //        // Save the time for future delta calculations
            //        prevTime = time;
            //    }
            //}

            function onWindowResize() {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            }

            function animate() {
                requestAnimationFrame(animate);
                character.updatePlayerMovement();
                scene.simulate();
                renderer.render(scene, camera);
            }
            init();
            animate();
        }

    </script>
    <script src="~/lib/threejs/three.min.js"></script>
    <script src="~/lib/threejs/OrbitControls.js"></script>
    <script src="~/lib/physijs/physi.js"></script>
    <script src="~/lib/physijs/physijs_worker.js"></script>
    <script src="~/lib/threejs/FirstPersonControls.js"></script>
    <script src="~/lib/threejs/MTLLoader.js"></script>
    <script src="~/lib/threejs/OBJLoader.js"></script>
    <script src="~/js/BasicPlane.js"></script>
    <script src="~/js/Character.js"></script>
</body>
</html>